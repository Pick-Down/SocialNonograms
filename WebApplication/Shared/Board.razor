@using SN.Model
@using SN.Model.Board.Listener
@using SN.Model.Solver
@inject IBoardListener _listener

<div>
    <table style="margin-left: auto; margin-right: auto; user-select: none" onmousemove="">
        @for (int row = 0; row < BoardModel.FullBoard.GetLength(0); row++)
        {
            var rowNum = row;
            <tr>
                @for (int col = 0; col < BoardModel.FullBoard.GetLength(1); col++)
                {
                    var colNum = col;
                    <td class="@BoardModel.FullBoard[row,col].GetCellStyles()">
                        <div class="content big"  
                             @onclick="@(e => HandleLeftClick(e, rowNum, colNum))" 
                             @oncontextmenu="@(e => HandleRightClick(e, rowNum, colNum))" 
                             @oncontextmenu:preventDefault="true">
                             @BoardModel.FullBoard[row, col].Content
                        </div>
                    </td>
                }
            </tr>
        }
    </table>
</div>
<br/>
<br/>
<br/>   

@code {
    [Parameter]
    public BoardModel BoardModel { get; set; }
    [Parameter]
    public IBoardSolver BoardSolver { get; set; }
    [Parameter]
    public EventCallback OnComplete { get; set; }

    private bool _isComplete;

    protected override void OnInitialized()
    {
        BoardModel.Register(_listener);
    }

    private void HandleLeftClick(MouseEventArgs args, int row, int col)
    {
        if (!_isComplete)
        {
            BoardModel.FullBoard[row, col].OnLeftMouseClick(row, col);
            _isComplete = CheckComplete();
            if (_isComplete)
                OnComplete.InvokeAsync();
        }
    }

    private void HandleRightClick(MouseEventArgs args, int row, int col)
    {
        if (!_isComplete)
        {
            BoardModel.FullBoard[row, col].OnRightMouseClick(row, col);
            _isComplete = CheckComplete();
            if (_isComplete)
                OnComplete.InvokeAsync();
        }
    }

    private bool CheckComplete()
    {
        return BoardSolver.IsComplete();
    }

}